name: Peer Review Repo Check

on:
  issues:
    types: [opened, edited]

jobs:
  check_repo:
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue body contains repo link
        id: check_link
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = context.payload.issue.body || '';
            const repoLinkRegex = /https:\/\/github\.com\/([\w.-]+)\/([\w.-]+)/;
            const match = repoLinkRegex.exec(issueBody);
            if (!match) {
              core.setOutput('repoFound', 'false');
            } else {
              core.setOutput('repoFound', 'true');
              core.setOutput('owner', match[1]);
              core.setOutput('repo', match[2]);
            }

      - name: Comment "Check started"
        if: steps.check_link.outputs.repoFound == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: 'Начинаю проверку репозитория по ссылке из issue...'
            });

      - name: Check branch and PR
        if: steps.check_link.outputs.repoFound == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const targetOwner = '${{ steps.check_link.outputs.owner }}';
            const targetRepo = '${{ steps.check_link.outputs.repo }}';
            
            const issue_number = context.payload.issue.number;
            const ownerOrg = context.repo.owner;
            const repoOrg = context.repo.repo;
            
            try {
              // Проверка наличия ветки 'branch-with-feature'
              let branchExists = false;
              let branches;
              try {
                branches = await github.rest.repos.listBranches({
                  owner: targetOwner,
                  repo: targetRepo
                });
                branchExists = branches.data.some(b => b.name === 'branch-with-feature');
              } catch (error) {
                if (error.status === 404) {
                  await github.rest.issues.createComment({
                    owner: ownerOrg,
                    repo: repoOrg,
                    issue_number,
                    body: `❌ Репозиторий https://github.com/${targetOwner}/${targetRepo} не найден или недоступен (приватный).`
                  });
                  return;
                }
                throw error;
              }
              
              // Проверка закрытого PR из branch-with-feature в main
              let prExists = false;
              const pulls = await github.rest.pulls.list({
                owner: targetOwner,
                repo: targetRepo,
                state: 'closed',
                base: 'main'
              });
              prExists = pulls.data.some(pr => pr.head.ref === 'branch-with-feature');
              
              let message = '';
              if (branchExists && prExists) {
                message = '✅ Проверка пройдена: ветка `branch-with-feature` существует и закрытый пулл реквест из неё в `main` есть.';
              } else {
                message = '❌ Проверка не пройдена:\n';
                if (!branchExists) message += '- Отсутствует ветка `branch-with-feature`\n';
                if (!prExists) message += '- Отсутствует закрытый PR из `branch-with-feature` в `main`\n';
              }
              
              await github.rest.issues.createComment({
                owner: ownerOrg,
                repo: repoOrg,
                issue_number,
                body: message
              });
              
            } catch (error) {
              console.error('Unexpected error:', error);
              await github.rest.issues.createComment({
                owner: ownerOrg,
                repo: repoOrg,
                issue_number,
                body: `❌ Произошла ошибка при проверке репозитория: ${error.message}`
              });
            }
